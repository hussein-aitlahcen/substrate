// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-08-05, STEPS: `50`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --internal-repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn instrument(c: u32, ) -> Weight;
	fn code_load(c: u32, ) -> Weight;
	fn code_refcount(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn claim_surcharge(c: u32, ) -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_delta(d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(4_018_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_201_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(48_224_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((37_595_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn instrument(c: u32, ) -> Weight {
		(70_871_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((76_337_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn code_load(c: u32, ) -> Weight {
		(7_214_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_012_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	fn code_refcount(c: u32, ) -> Weight {
		(11_405_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_030_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(228_775_000 as Weight)
			// Standard Error: 87_000
			.saturating_add((114_156_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 5_000
			.saturating_add((2_456_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(186_327_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_401_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn call() -> Weight {
		(171_471_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acafbc76efb655f52a2] (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a45e3386f1a83f00b28] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a96e4ef3ab80b5c3a5f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3d24875569a319056f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ad561e495f01c762] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3b624bb134596373c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aadbe519bace97698b4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7e33b1a343f33065bd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a626f271ae6979bbffe] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ce585fd4ae98b830b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac889c022f51a43b527] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f6353225ab0496d48] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab578892d355575c3e4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a02b4c8040b81dc785d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a8d13a70c1e380292ea] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2e4d2fc709d989c778] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a6df81b28bd3ec99a3a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af54f74589657eac0fd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a1849a3092175db4a2f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f05ecdc6c2c42c9fb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a24c3c0036dfb085bb9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a44d725ac77836eb10b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad04db6c692ab73d90d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a873009d6cdb99c5a4c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa958795fbfc2b5fa41] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a205b6f659d219c8cbc] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ade54b3bc3d3cdb1aeb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a538b748c1c5f92be98] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad50de2ad89aaa1e067] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a0576917f19ecaf2a3f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a5b44bd2793555a71e7] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc874645f7bbf62e62] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ae1b958a847e98bc8] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a396ae49d5311ee6bd1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa5d56999a2ebd1c4c9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a72f370c054587f81a5] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3a32934e459acb2ceb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac10fd56a5e084aae1c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2ba8e27fcdbc3ab4f2] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4a75b804eec44f3f2a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ebb181fc616bfdb4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a9aaf019a62fd907a8a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a19730285453eb7702a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acced4c24d0ebee7c29] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae458a57da6a2a6280a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a83b9f09b407c57d07e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc9fc095b3aaaef755] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a587ccf84053d9950ff] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a13d53bcf137f3784e9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abb79d34fb381ebd7c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a935ea70a3e699d23b6] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a109fcd63aefdae75a1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abca8d937a761f2eb46] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a314c97ff9e866a835b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a691e4b5f67da0dea8e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a127c680b864ee61620] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a148df8dfd47b4493f3] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a57c606ebe91374fcee] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acec20322704f7bec44] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abf6a27e09c6d0a9f0f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae2e8bdcf5850e20836] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab8399645bc39338a47] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a658619de90cae5dbe1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aeb9db1dfeed3a7b47b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abdc9db5edf43ffcb0d] (r:1 w:0)
	fn claim_surcharge(c: u32, ) -> Weight {
		(130_239_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((3_155_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(136_244_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((230_261_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(136_188_000 as Weight)
			// Standard Error: 134_000
			.saturating_add((230_609_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(135_232_000 as Weight)
			// Standard Error: 135_000
			.saturating_add((226_251_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_balance(r: u32, ) -> Weight {
		(137_584_000 as Weight)
			// Standard Error: 203_000
			.saturating_add((504_311_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(135_946_000 as Weight)
			// Standard Error: 148_000
			.saturating_add((226_540_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(136_779_000 as Weight)
			// Standard Error: 135_000
			.saturating_add((226_089_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(135_063_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((225_788_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(133_627_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((226_745_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_block_number(r: u32, ) -> Weight {
		(131_052_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((226_028_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(135_347_000 as Weight)
			// Standard Error: 115_000
			.saturating_add((225_510_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(146_581_000 as Weight)
			// Standard Error: 229_000
			.saturating_add((442_790_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_gas(r: u32, ) -> Weight {
		(121_785_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((113_526_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(124_916_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((6_849_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(132_770_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_209_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_return(r: u32, ) -> Weight {
		(120_307_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((4_870_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(127_999_000 as Weight)
			// Standard Error: 0
			.saturating_add((667_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(125_376_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((91_754_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af3fd4cc2fc8d170b6d] (r:1 w:0)
	fn seal_restore_to(r: u32, ) -> Weight {
		(152_195_000 as Weight)
			// Standard Error: 234_000
			.saturating_add((101_841_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_907_000
			.saturating_add((2_700_141_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(153_301_000 as Weight)
			// Standard Error: 232_000
			.saturating_add((573_271_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(165_776_000 as Weight)
			// Standard Error: 339_000
			.saturating_add((832_568_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_121_467_000 as Weight)
			// Standard Error: 3_023_000
			.saturating_add((532_192_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 595_000
			.saturating_add((166_575_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(132_773_000 as Weight)
			// Standard Error: 120_000
			.saturating_add((161_204_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(131_854_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((124_652_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(133_468_000 as Weight)
			// Standard Error: 689_000
			.saturating_add((527_648_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(565_093_000 as Weight)
			// Standard Error: 189_000
			.saturating_add((59_309_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_785_000
			.saturating_add((1_035_245_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 862_000
			.saturating_add((698_081_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(587_128_000 as Weight)
			// Standard Error: 232_000
			.saturating_add((106_710_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_686_000
			.saturating_add((4_863_220_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 8_863_000
			.saturating_add((11_626_703_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: System Account (r:101 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:2 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(11_142_344_000 as Weight)
			// Standard Error: 144_000_000
			.saturating_add((3_700_196_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 51_000
			.saturating_add((49_158_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 55_000
			.saturating_add((71_354_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(205 as Weight))
			.saturating_add(T::DbWeight::get().writes(101 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_878_000
			.saturating_add((20_697_213_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: System Account (r:101 w:101)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(15_793_141_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((50_328_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 38_000
			.saturating_add((73_521_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 38_000
			.saturating_add((196_433_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes(204 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(134_096_000 as Weight)
			// Standard Error: 148_000
			.saturating_add((223_948_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(389_634_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((479_300_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(135_364_000 as Weight)
			// Standard Error: 141_000
			.saturating_add((227_720_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(337_936_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((329_511_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(138_163_000 as Weight)
			// Standard Error: 141_000
			.saturating_add((205_588_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(368_278_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((148_147_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(141_426_000 as Weight)
			// Standard Error: 142_000
			.saturating_add((211_322_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(381_627_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((148_169_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(21_534_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((3_208_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(23_694_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((160_075_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(23_560_000 as Weight)
			// Standard Error: 61_000
			.saturating_add((233_792_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(21_527_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((11_951_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(21_555_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((11_548_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(21_550_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((5_683_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(21_542_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((13_248_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(21_475_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((14_988_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(33_905_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((107_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(21_845_000 as Weight)
			// Standard Error: 189_000
			.saturating_add((87_653_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(28_410_000 as Weight)
			// Standard Error: 1_251_000
			.saturating_add((188_501_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(222_421_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((3_864_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(21_687_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((3_243_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(21_652_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((3_710_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(21_663_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((4_987_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(24_747_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((7_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(24_741_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_860_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(23_651_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((3_472_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(22_098_000 as Weight)
			// Standard Error: 4_832_000
			.saturating_add((2_332_489_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(21_558_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((5_050_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(21_589_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((4_981_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(21_530_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((5_841_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(21_613_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((4_826_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(21_591_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((4_624_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(21_563_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((4_691_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(21_559_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((4_734_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(21_653_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((6_743_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(21_486_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((6_758_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(21_450_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((6_933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(21_468_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((6_975_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(21_491_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((6_855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(21_474_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((6_946_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(21_450_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((6_860_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(21_434_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((7_573_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(21_541_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((6_855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(21_573_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((6_817_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(21_442_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((6_864_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(21_477_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((6_734_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(21_529_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((6_681_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(21_523_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((13_151_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(21_653_000 as Weight)
			// Standard Error: 47_000
			.saturating_add((12_178_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(21_567_000 as Weight)
			// Standard Error: 45_000
			.saturating_add((13_155_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(21_514_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((12_496_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(21_588_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((6_771_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(21_575_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((6_702_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(21_574_000 as Weight)
			// Standard Error: 47_000
			.saturating_add((6_794_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(21_570_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((7_271_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(21_558_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((6_978_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(21_599_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((6_927_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(21_502_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((6_930_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(21_597_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((6_785_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(4_018_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_201_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(48_224_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((37_595_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn instrument(c: u32, ) -> Weight {
		(70_871_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((76_337_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn code_load(c: u32, ) -> Weight {
		(7_214_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_012_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	fn code_refcount(c: u32, ) -> Weight {
		(11_405_000 as Weight)
			// Standard Error: 0
			.saturating_add((3_030_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(228_775_000 as Weight)
			// Standard Error: 87_000
			.saturating_add((114_156_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 5_000
			.saturating_add((2_456_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(186_327_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_401_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn call() -> Weight {
		(171_471_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acafbc76efb655f52a2] (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a45e3386f1a83f00b28] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a96e4ef3ab80b5c3a5f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3d24875569a319056f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ad561e495f01c762] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3b624bb134596373c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aadbe519bace97698b4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7e33b1a343f33065bd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a626f271ae6979bbffe] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ce585fd4ae98b830b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac889c022f51a43b527] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f6353225ab0496d48] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab578892d355575c3e4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a02b4c8040b81dc785d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a8d13a70c1e380292ea] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2e4d2fc709d989c778] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a6df81b28bd3ec99a3a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af54f74589657eac0fd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a1849a3092175db4a2f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f05ecdc6c2c42c9fb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a24c3c0036dfb085bb9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a44d725ac77836eb10b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad04db6c692ab73d90d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a873009d6cdb99c5a4c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa958795fbfc2b5fa41] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a205b6f659d219c8cbc] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ade54b3bc3d3cdb1aeb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a538b748c1c5f92be98] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad50de2ad89aaa1e067] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a0576917f19ecaf2a3f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a5b44bd2793555a71e7] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc874645f7bbf62e62] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ae1b958a847e98bc8] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a396ae49d5311ee6bd1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa5d56999a2ebd1c4c9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a72f370c054587f81a5] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3a32934e459acb2ceb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac10fd56a5e084aae1c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2ba8e27fcdbc3ab4f2] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4a75b804eec44f3f2a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ebb181fc616bfdb4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a9aaf019a62fd907a8a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a19730285453eb7702a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acced4c24d0ebee7c29] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae458a57da6a2a6280a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a83b9f09b407c57d07e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc9fc095b3aaaef755] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a587ccf84053d9950ff] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a13d53bcf137f3784e9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abb79d34fb381ebd7c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a935ea70a3e699d23b6] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a109fcd63aefdae75a1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abca8d937a761f2eb46] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a314c97ff9e866a835b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a691e4b5f67da0dea8e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a127c680b864ee61620] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a148df8dfd47b4493f3] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a57c606ebe91374fcee] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acec20322704f7bec44] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abf6a27e09c6d0a9f0f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae2e8bdcf5850e20836] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab8399645bc39338a47] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a658619de90cae5dbe1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aeb9db1dfeed3a7b47b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abdc9db5edf43ffcb0d] (r:1 w:0)
	fn claim_surcharge(c: u32, ) -> Weight {
		(130_239_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((3_155_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(136_244_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((230_261_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(136_188_000 as Weight)
			// Standard Error: 134_000
			.saturating_add((230_609_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(135_232_000 as Weight)
			// Standard Error: 135_000
			.saturating_add((226_251_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_balance(r: u32, ) -> Weight {
		(137_584_000 as Weight)
			// Standard Error: 203_000
			.saturating_add((504_311_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(135_946_000 as Weight)
			// Standard Error: 148_000
			.saturating_add((226_540_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(136_779_000 as Weight)
			// Standard Error: 135_000
			.saturating_add((226_089_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(135_063_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((225_788_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(133_627_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((226_745_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_block_number(r: u32, ) -> Weight {
		(131_052_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((226_028_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(135_347_000 as Weight)
			// Standard Error: 115_000
			.saturating_add((225_510_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(146_581_000 as Weight)
			// Standard Error: 229_000
			.saturating_add((442_790_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_gas(r: u32, ) -> Weight {
		(121_785_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((113_526_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(124_916_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((6_849_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(132_770_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_209_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_return(r: u32, ) -> Weight {
		(120_307_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((4_870_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(127_999_000 as Weight)
			// Standard Error: 0
			.saturating_add((667_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(125_376_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((91_754_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af3fd4cc2fc8d170b6d] (r:1 w:0)
	fn seal_restore_to(r: u32, ) -> Weight {
		(152_195_000 as Weight)
			// Standard Error: 234_000
			.saturating_add((101_841_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_907_000
			.saturating_add((2_700_141_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(153_301_000 as Weight)
			// Standard Error: 232_000
			.saturating_add((573_271_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(165_776_000 as Weight)
			// Standard Error: 339_000
			.saturating_add((832_568_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_121_467_000 as Weight)
			// Standard Error: 3_023_000
			.saturating_add((532_192_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 595_000
			.saturating_add((166_575_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(132_773_000 as Weight)
			// Standard Error: 120_000
			.saturating_add((161_204_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(131_854_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((124_652_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(133_468_000 as Weight)
			// Standard Error: 689_000
			.saturating_add((527_648_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(565_093_000 as Weight)
			// Standard Error: 189_000
			.saturating_add((59_309_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_785_000
			.saturating_add((1_035_245_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 862_000
			.saturating_add((698_081_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(587_128_000 as Weight)
			// Standard Error: 232_000
			.saturating_add((106_710_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_686_000
			.saturating_add((4_863_220_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 8_863_000
			.saturating_add((11_626_703_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: System Account (r:101 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:2 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(11_142_344_000 as Weight)
			// Standard Error: 144_000_000
			.saturating_add((3_700_196_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 51_000
			.saturating_add((49_158_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 55_000
			.saturating_add((71_354_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(205 as Weight))
			.saturating_add(RocksDbWeight::get().writes(101 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_878_000
			.saturating_add((20_697_213_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: System Account (r:101 w:101)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(15_793_141_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((50_328_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 38_000
			.saturating_add((73_521_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 38_000
			.saturating_add((196_433_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes(204 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(134_096_000 as Weight)
			// Standard Error: 148_000
			.saturating_add((223_948_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(389_634_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((479_300_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(135_364_000 as Weight)
			// Standard Error: 141_000
			.saturating_add((227_720_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(337_936_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((329_511_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(138_163_000 as Weight)
			// Standard Error: 141_000
			.saturating_add((205_588_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(368_278_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((148_147_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(141_426_000 as Weight)
			// Standard Error: 142_000
			.saturating_add((211_322_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(381_627_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((148_169_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(21_534_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((3_208_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(23_694_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((160_075_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(23_560_000 as Weight)
			// Standard Error: 61_000
			.saturating_add((233_792_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(21_527_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((11_951_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(21_555_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((11_548_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(21_550_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((5_683_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(21_542_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((13_248_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(21_475_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((14_988_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(33_905_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((107_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(21_845_000 as Weight)
			// Standard Error: 189_000
			.saturating_add((87_653_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(28_410_000 as Weight)
			// Standard Error: 1_251_000
			.saturating_add((188_501_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(222_421_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((3_864_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(21_687_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((3_243_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(21_652_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((3_710_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(21_663_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((4_987_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(24_747_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((7_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(24_741_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_860_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(23_651_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((3_472_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(22_098_000 as Weight)
			// Standard Error: 4_832_000
			.saturating_add((2_332_489_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(21_558_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((5_050_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(21_589_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((4_981_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(21_530_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((5_841_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(21_613_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((4_826_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(21_591_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((4_624_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(21_563_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((4_691_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(21_559_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((4_734_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(21_653_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((6_743_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(21_486_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((6_758_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(21_450_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((6_933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(21_468_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((6_975_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(21_491_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((6_855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(21_474_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((6_946_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(21_450_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((6_860_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(21_434_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((7_573_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(21_541_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((6_855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(21_573_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((6_817_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(21_442_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((6_864_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(21_477_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((6_734_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(21_529_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((6_681_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(21_523_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((13_151_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(21_653_000 as Weight)
			// Standard Error: 47_000
			.saturating_add((12_178_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(21_567_000 as Weight)
			// Standard Error: 45_000
			.saturating_add((13_155_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(21_514_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((12_496_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(21_588_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((6_771_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(21_575_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((6_702_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(21_574_000 as Weight)
			// Standard Error: 47_000
			.saturating_add((6_794_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(21_570_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((7_271_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(21_558_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((6_978_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(21_599_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((6_927_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(21_502_000 as Weight)
			// Standard Error: 39_000
			.saturating_add((6_930_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(21_597_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((6_785_000 as Weight).saturating_mul(r as Weight))
	}
}

// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_elections_phragmen
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-08-06, STEPS: `50`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --internal-repeat=20
// --pallet=pallet_elections_phragmen
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/elections-phragmen/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_elections_phragmen.
pub trait WeightInfo {
	fn vote_equal(v: u32, ) -> Weight;
	fn vote_more(v: u32, ) -> Weight;
	fn vote_less(v: u32, ) -> Weight;
	fn remove_voter() -> Weight;
	fn submit_candidacy(c: u32, ) -> Weight;
	fn renounce_candidacy_candidate(c: u32, ) -> Weight;
	fn renounce_candidacy_members() -> Weight;
	fn renounce_candidacy_runners_up() -> Weight;
	fn remove_member_with_replacement() -> Weight;
	fn remove_member_wrong_refund() -> Weight;
	fn clean_defunct_voters(v: u32, d: u32, ) -> Weight;
	fn election_phragmen(c: u32, v: u32, e: u32, ) -> Weight;
}

/// Weights for pallet_elections_phragmen using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Elections Candidates (r:1 w:0)
	// Storage: Elections RunnersUp (r:1 w:0)
	// Storage: Elections Voting (r:1 w:1)
	// Storage: Elections Members (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn vote_equal(v: u32, ) -> Weight {
		(44_634_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((292_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Elections Members (r:1 w:0)
	// Storage: Elections Voting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Elections RunnersUp (r:1 w:0)
	// Storage: Elections Candidates (r:1 w:0)
	fn vote_more(v: u32, ) -> Weight {
		(68_847_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((298_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Elections Candidates (r:1 w:0)
	// Storage: Elections Members (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Elections Voting (r:1 w:1)
	// Storage: Elections RunnersUp (r:1 w:0)
	fn vote_less(v: u32, ) -> Weight {
		(68_567_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((307_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Elections Voting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn remove_voter() -> Weight {
		(62_283_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Elections Candidates (r:1 w:1)
	// Storage: Elections Members (r:1 w:0)
	// Storage: Elections RunnersUp (r:1 w:0)
	fn submit_candidacy(c: u32, ) -> Weight {
		(52_686_000 as Weight)
			// Standard Error: 0
			.saturating_add((244_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Elections Candidates (r:1 w:1)
	fn renounce_candidacy_candidate(c: u32, ) -> Weight {
		(46_341_000 as Weight)
			// Standard Error: 0
			.saturating_add((124_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance1Collective Proposals (r:1 w:0)
	// Storage: Elections RunnersUp (r:1 w:1)
	// Storage: Instance1Collective Members (r:0 w:1)
	// Storage: Instance1Collective Prime (r:1 w:1)
	// Storage: Elections Members (r:1 w:1)
	fn renounce_candidacy_members() -> Weight {
		(68_264_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Elections RunnersUp (r:1 w:1)
	fn renounce_candidacy_runners_up() -> Weight {
		(46_458_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Elections Members (r:1 w:1)
	// Storage: Elections RunnersUp (r:1 w:1)
	// Storage: Instance1Collective Members (r:0 w:1)
	// Storage: Instance1Collective Prime (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Instance1Collective Proposals (r:1 w:0)
	fn remove_member_with_replacement() -> Weight {
		(80_614_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Elections RunnersUp (r:1 w:0)
	fn remove_member_wrong_refund() -> Weight {
		(12_467_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Elections RunnersUp (r:1 w:0)
	// Storage: Elections Members (r:1 w:0)
	// Storage: Elections Voting (r:251 w:250)
	// Storage: System Account (r:250 w:250)
	// Storage: Balances Locks (r:250 w:250)
	// Storage: Elections Candidates (r:1 w:0)
	fn clean_defunct_voters(v: u32, d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_000
			.saturating_add((111_025_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 32_000
			.saturating_add((396_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(v as Weight)))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(v as Weight)))
	}
	// Storage: Instance1Collective Proposals (r:1 w:0)
	// Storage: Elections Candidates (r:1 w:1)
	// Storage: Elections ElectionRounds (r:1 w:1)
	// Storage: Elections Voting (r:502 w:0)
	// Storage: Elections RunnersUp (r:1 w:1)
	// Storage: Elections Members (r:1 w:1)
	// Storage: Instance1Collective Prime (r:0 w:1)
	// Storage: Instance1Collective Members (r:0 w:1)
	// Storage: System Account (r:2 w:2)
	fn election_phragmen(c: u32, v: u32, e: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_794_000
			.saturating_add((41_379_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 746_000
			.saturating_add((60_262_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 50_000
			.saturating_add((3_820_000 as Weight).saturating_mul(e as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(v as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Elections Candidates (r:1 w:0)
	// Storage: Elections RunnersUp (r:1 w:0)
	// Storage: Elections Voting (r:1 w:1)
	// Storage: Elections Members (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn vote_equal(v: u32, ) -> Weight {
		(44_634_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((292_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Elections Members (r:1 w:0)
	// Storage: Elections Voting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Elections RunnersUp (r:1 w:0)
	// Storage: Elections Candidates (r:1 w:0)
	fn vote_more(v: u32, ) -> Weight {
		(68_847_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((298_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Elections Candidates (r:1 w:0)
	// Storage: Elections Members (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Elections Voting (r:1 w:1)
	// Storage: Elections RunnersUp (r:1 w:0)
	fn vote_less(v: u32, ) -> Weight {
		(68_567_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((307_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Elections Voting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn remove_voter() -> Weight {
		(62_283_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Elections Candidates (r:1 w:1)
	// Storage: Elections Members (r:1 w:0)
	// Storage: Elections RunnersUp (r:1 w:0)
	fn submit_candidacy(c: u32, ) -> Weight {
		(52_686_000 as Weight)
			// Standard Error: 0
			.saturating_add((244_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Elections Candidates (r:1 w:1)
	fn renounce_candidacy_candidate(c: u32, ) -> Weight {
		(46_341_000 as Weight)
			// Standard Error: 0
			.saturating_add((124_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance1Collective Proposals (r:1 w:0)
	// Storage: Elections RunnersUp (r:1 w:1)
	// Storage: Instance1Collective Members (r:0 w:1)
	// Storage: Instance1Collective Prime (r:1 w:1)
	// Storage: Elections Members (r:1 w:1)
	fn renounce_candidacy_members() -> Weight {
		(68_264_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Elections RunnersUp (r:1 w:1)
	fn renounce_candidacy_runners_up() -> Weight {
		(46_458_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Elections Members (r:1 w:1)
	// Storage: Elections RunnersUp (r:1 w:1)
	// Storage: Instance1Collective Members (r:0 w:1)
	// Storage: Instance1Collective Prime (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Instance1Collective Proposals (r:1 w:0)
	fn remove_member_with_replacement() -> Weight {
		(80_614_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Elections RunnersUp (r:1 w:0)
	fn remove_member_wrong_refund() -> Weight {
		(12_467_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Elections RunnersUp (r:1 w:0)
	// Storage: Elections Members (r:1 w:0)
	// Storage: Elections Voting (r:251 w:250)
	// Storage: System Account (r:250 w:250)
	// Storage: Balances Locks (r:250 w:250)
	// Storage: Elections Candidates (r:1 w:0)
	fn clean_defunct_voters(v: u32, d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_000
			.saturating_add((111_025_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 32_000
			.saturating_add((396_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((3 as Weight).saturating_mul(v as Weight)))
			.saturating_add(RocksDbWeight::get().writes((3 as Weight).saturating_mul(v as Weight)))
	}
	// Storage: Instance1Collective Proposals (r:1 w:0)
	// Storage: Elections Candidates (r:1 w:1)
	// Storage: Elections ElectionRounds (r:1 w:1)
	// Storage: Elections Voting (r:502 w:0)
	// Storage: Elections RunnersUp (r:1 w:1)
	// Storage: Elections Members (r:1 w:1)
	// Storage: Instance1Collective Prime (r:0 w:1)
	// Storage: Instance1Collective Members (r:0 w:1)
	// Storage: System Account (r:2 w:2)
	fn election_phragmen(c: u32, v: u32, e: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_794_000
			.saturating_add((41_379_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 746_000
			.saturating_add((60_262_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 50_000
			.saturating_add((3_820_000 as Weight).saturating_mul(e as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(c as Weight)))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(v as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
	}
}
